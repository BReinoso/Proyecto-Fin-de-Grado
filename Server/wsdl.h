/* wsdl.h
   Generated by wsdl2h 2.8.21 from server.xsd and typemap.dat
   2015-03-26 11:23:11 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on wsdl.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt cw

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:


*/

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "":definitions
/// @brief "":definitions is a complexType.
///
struct definitions
{
/// Element "types" has no type or ref (empty or with XML content).
    _XML                                 types                          1;	///< Required element.
/// Size of message array is 1..unbounded.
   $int                                  __sizemessage                  1;
    struct definitions_message
    {
    struct definitions_message_part
    {
/// Attribute "name" of XSD type xs:string.
   @char*                                name                           0;	///< Optional attribute.
/// Attribute "type" of XSD type xs:string.
   @char*                                type                           0;	///< Optional attribute.
    }                                    part                           1;	///< Required element.
/// Attribute "name" of XSD type xs:string.
   @char*                                name                           0;	///< Optional attribute.
    }                                   *message                        1;
    struct definitions_portType
    {
    struct definitions_portType_operation
    {
    struct definitions_portType_operation_input
    {
/// Attribute "message" of XSD type xs:string.
   @char*                                message                        0;	///< Optional attribute.
    }                                    input                          1;	///< Required element.
    struct definitions_portType_operation_output
    {
/// Attribute "message" of XSD type xs:string.
   @char*                                message                        0;	///< Optional attribute.
    }                                    output                         1;	///< Required element.
/// Attribute "name" of XSD type xs:string.
   @char*                                name                           0;	///< Optional attribute.
    }                                    operation                      1;	///< Required element.
/// Attribute "name" of XSD type xs:string.
   @char*                                name                           0;	///< Optional attribute.
    }                                    portType                       1;	///< Required element.
    struct definitions_binding
    {
    struct _definitions_binding_soap__binding
    {
/// Attribute "style" of XSD type xs:string.
   @char*                                style                          0;	///< Optional attribute.
/// Attribute "transport" of XSD type xs:string.
   @char*                                transport                      0;	///< Optional attribute.
    }                                    soap__binding                  1;	///< Required element.
    struct definitions_binding_operation
    {
    struct _definitions_binding_operation_soap__operation
    {
/// Attribute "soapAction" of XSD type xs:string.
   @char*                                soapAction                     0;	///< Optional attribute.
    }                                    soap__operation                1;	///< Required element.
    struct definitions_binding_operation_input
    {
    struct _definitions_binding_operation_input_soap__body
    {
/// Attribute "encodingStyle" of XSD type xs:string.
   @char*                                encodingStyle                  0;	///< Optional attribute.
/// Attribute "namespace" of XSD type xs:string.
   @char*                                namespace_                     0;	///< Optional attribute.
/// Attribute "use" of XSD type xs:string.
   @char*                                use                            0;	///< Optional attribute.
    }                                    soap__body                     1;	///< Required element.
    }                                    input                          1;	///< Required element.
    struct definitions_binding_operation_output
    {
    struct _definitions_binding_operation_output_soap__body
    {
/// Attribute "encodingStyle" of XSD type xs:string.
   @char*                                encodingStyle                  0;	///< Optional attribute.
/// Attribute "namespace" of XSD type xs:string.
   @char*                                namespace_                     0;	///< Optional attribute.
/// Attribute "use" of XSD type xs:string.
   @char*                                use                            0;	///< Optional attribute.
    }                                    soap__body                     1;	///< Required element.
    }                                    output                         1;	///< Required element.
/// Attribute "name" of XSD type xs:string.
   @char*                                name                           0;	///< Optional attribute.
    }                                    operation                      1;	///< Required element.
/// Attribute "name" of XSD type xs:string.
   @char*                                name                           0;	///< Optional attribute.
/// Attribute "type" of XSD type xs:string.
   @char*                                type                           0;	///< Optional attribute.
    }                                    binding                        1;	///< Required element.
    struct definitions_service
    {
/// Element "documentation" of XSD type xs:string.
    char*                                documentation                  1;	///< Required element.
    struct definitions_service_port
    {
    struct _definitions_service_port_soap__address
    {
/// Attribute "location" of XSD type xs:string.
   @char*                                location                       0;	///< Optional attribute.
    }                                    soap__address                  1;	///< Required element.
/// Attribute "binding" of XSD type xs:string.
   @char*                                binding                        0;	///< Optional attribute.
/// Attribute "name" of XSD type xs:string.
   @char*                                name                           0;	///< Optional attribute.
    }                                    port                           1;	///< Required element.
/// Attribute "name" of XSD type xs:string.
   @char*                                name                           0;	///< Optional attribute.
    }                                    service                        1;	///< Required element.
/// Attribute "name" of XSD type xs:string.
   @char*                                name                           0;	///< Optional attribute.
/// Attribute "targetNamespace" of XSD type xs:string.
   @char*                                targetNamespace                0;	///< Optional attribute.
/// Attribute "xmlns" of XSD type xs:string.
   @char*                                xmlns                          0;	///< Optional attribute.
/// Attribute "xmlns:soap" of XSD type xs:string.
   @char*                                xmlns__soap                    0;	///< Optional attribute.
/// Attribute "xmlns:tns" of XSD type xs:string.
   @char*                                xmlns__tns                     0;	///< Optional attribute.
/// Attribute "xmlns:xsd" of XSD type xs:string.
   @char*                                xmlns__xsd                     0;	///< Optional attribute.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section default Top-level root elements of schema ""

  - <definitions> @ref definitions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read_definitions(struct soap*, struct definitions*);
    // Writer (returns SOAP_OK on success):
    soap_write_definitions(struct soap*, struct definitions*);
    @endcode

*/

/* End of wsdl.h */